package com.aspose.external.barcode.tester.issues;

import com.aspose.barcode.auxiliary.Global;
import com.aspose.barcode.barcoderecognition.BarCodeReader;
import com.aspose.barcode.barcoderecognition.DecodeType;
import com.aspose.barcode.barcoderecognition.QualitySettings;
import com.aspose.barcode.generation.BarcodeGenerator;
import com.aspose.barcode.generation.EncodeTypes;
import com.aspose.barcode.logger.Logger;
import org.testng.Assert;
import org.testng.annotations.AfterMethod;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.Test;
import utils.LicenseAssistant;

import java.awt.image.BufferedImage;
import java.io.File;
import java.lang.reflect.Method;


@Test(description = "Tests for Issue34030.")
public class Issue34030
{
    private static final String CodeText = "(02)04006664241007(37)1(400)7019590754";

    private final String folder = Global.getTestDataFolder("Issues" + File.separator + "Issue34030");

    @BeforeMethod
    public void setUp()
    {
        LicenseAssistant.setupLicense();
    }

    @AfterMethod
    public void afterFinish(Method testMethod)
    {
        Logger.methodFinished(getClass().getName() + "." + testMethod.getName());
    }

    /**
     * <p>
     * Tests generation and recognition in real-time.
     * </p>
     */
    @Test
    public void testGenerationAndRecognition()
    {
        BarcodeGenerator gen = new BarcodeGenerator(EncodeTypes.GS_1_CODE_128, CodeText);
            BufferedImage bitmap = gen.generateBarCodeImage();
        final BarCodeReader reader = new BarCodeReader(bitmap, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 1);
        Assert.assertEquals(CodeText, reader.getFoundBarCodes()[0].getCodeText());

    }

    /**
     * <p>
     * Tests generated by old Aspose (v6.6) barcode.
     * </p>
     */
    @Test
    public void testAsposeBarCodeOld()
    {
        String fileName = Global.pathCombine(folder, "barcode.bmp");
        final BarCodeReader reader = new BarCodeReader(fileName, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 1);
        Assert.assertEquals("(02)04006664241007(37)1f4007019590754", reader.getFoundBarCodes()[0].getCodeText());


    }

    /**
     * <p>
     * Tests generated by Aspose (pre v6.7) barcode with first fix.
     * </p>
     */
    @Test
    public void testAsposeBarCodeFirstFix()
    {
        String fileName = Global.pathCombine(folder, "barcode_FirstFix.png");
        final BarCodeReader reader = new BarCodeReader(fileName, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 1);
        Assert.assertEquals(CodeText, reader.getFoundBarCodes()[0].getCodeText());
    }

    /**
     * <p>
     * Tests generated by Aspose (pre v6.7) barcode with second fix.
     * This picture is the best from other variants.
     * </p>
     */
    @Test
    public void testAsposeBarCodeSecondFix()
    {
        String fileName = Global.pathCombine(folder, "barcode_SecondFix.png");
        final BarCodeReader reader = new BarCodeReader(fileName, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 1);
        Assert.assertEquals(CodeText, reader.getFoundBarCodes()[0].getCodeText());
    }

    /**
     * <p>
     * Tests generated by customer picture with two barcodes (Customer barcode and Aspose).
     * </p>
     */
    @Test
    public void testComparisonFromCustomer()
    {
        String fileName = Global.pathCombine(folder, "barcode_01_comparison.png");
        final BarCodeReader reader = new BarCodeReader(fileName, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 2);
        Assert.assertEquals(CodeText, reader.getFoundBarCodes()[0].getCodeText());
        Assert.assertEquals("(02)04006664241007(37)1f4007019590754", reader.getFoundBarCodes()[1].getCodeText());
    }

    /**
     * <p>
     * Tests customer barcode (generated by http://generator.onbarcode.com/online-gs1-128-barcode-generator.aspx ).
     * </p>
     */
    @Test
    public void testCustomerBarcode()
    {
        String fileName = Global.pathCombine(folder, "barcode_ok_01.png");
        final BarCodeReader reader = new BarCodeReader(fileName, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 1);
        Assert.assertEquals(CodeText, reader.getFoundBarCodes()[0].getCodeText());

    }

    /**
     * <p>
     * Tests generated on some website barcode.
     * </p>
     */
    @Test
    public void testGeneratedOnSomeWebSite()
    {
        String fileName = Global.pathCombine(folder, "code-128_(02)04006664241007(37)1(400)7019590754.png");
        final BarCodeReader reader = new BarCodeReader(fileName, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 1);
        Assert.assertEquals(CodeText, reader.getFoundBarCodes()[0].getCodeText());
    }

    /**
     * <p>
     * Tests generated on terryburton website barcode ( http://www.terryburton.co.uk/barcodewriter/generator/ ).
     * </p>
     */
    @Test
    public void testTerryburton()
    {
        String fileName = Global.pathCombine(folder, "terryburton.png");
        final BarCodeReader reader = new BarCodeReader(fileName, DecodeType.GS_1_CODE_128);
        reader.setQualitySettings(QualitySettings.getHighPerformance());
        Assert.assertEquals(reader.readBarCodes().length, 1);
        Assert.assertEquals(CodeText, reader.getFoundBarCodes()[0].getCodeText());

    }
}

